diff --git a/../12-linked-list/linked_list.c b/list_slab.c
index bd0be9b..091d8f7 100644
--- a/../12-linked-list/linked_list.c
+++ b/list_slab.c
@@ -18,15 +18,27 @@ struct identity {
 	struct list_head list;
 };
 
+/*
+  This constructor is here just so this slab doesn't get merged with others, and
+  we can see it in /proc/slabinfo. See
+  https://stackoverflow.com/questions/24858424/unable-to-find-new-object-create-with-kmem-cache-create-in-proc-slabinfo
+ */
+static void identity_constructor(void *addr)
+{
+	memset(addr, 0, sizeof(struct identity));
+}
+
 static LIST_HEAD(identity_list);
 
+static struct kmem_cache *identity_cache;
+
 static int identity_create(char *name, int id)
 {
 	struct identity *new_ident;
 
 	// TODO: Look for id in existing list and fail if exists
 
-	new_ident = kmalloc(sizeof(*new_ident), GFP_KERNEL);
+	new_ident = kmem_cache_alloc(identity_cache, GFP_KERNEL);
 	if (new_ident == NULL) {
 		return -EINVAL;
 	}
@@ -56,7 +68,7 @@ static void identity_destroy(int id)
 	struct identity *identity = identity_find(id);
 	if (identity != NULL) {
 		list_del(&(identity->list));
-		kfree(identity);
+		kmem_cache_free(identity_cache, identity);
 	}
 
 }
@@ -67,6 +79,10 @@ static int __init linked_list_start(void)
 
 	pr_info("Loading %s\n", THIS_MODULE->name);
 
+	identity_cache = kmem_cache_create("identity", sizeof(struct identity), 0, 0, identity_constructor);
+	if (identity_cache == NULL)
+		return -ENOMEM;
+
 	if ((identity_create("Alice", 1)) != 0) {
 		return -EINVAL;
 	}
@@ -111,6 +127,9 @@ static void __exit linked_list_end(void)
 		pr_info("id = 3 is gone now\n");
 
 	pr_info("list_empty() == %d\n", list_empty(&identity_list));
+
+	if (identity_cache)
+		kmem_cache_destroy(identity_cache);
 }
 
 module_init(linked_list_start);
