     1                                 %line 1+1 lib.asm
     2                                 
     3                                 
     4                                 [section .data]
     5                                 
     6                                 [section .text]
     7                                 
     8                                 
     9                                 [global exit]
    10                                 exit:
    11 00000000 4889C7                  mov rdi, rax
    12 00000003 48C7C03C000000          mov rax, 60
    13 0000000A 0F05                    syscall
    14                                 
    15                                 
    16                                 [global strlen]
    17                                 strlen:
    18 0000000C 4831C0                  xor rax, rax
    19                                 
    20                                 .loop:
    21 0000000F 803C0700                cmp byte [rdi + rax], 0
    22                                 
    23                                 
    24                                 
    25 00000013 7403                    je .end
    26                                 
    27 00000015 48FFC0                  inc rax
    28 00000018 EBF3                    jmp .loop
    29                                 
    30                                 .end:
    31 0000001A C3                      ret
    32                                 
    33                                 
    34                                 
    35                                 [global print_string]
    36                                 print_string:
    37                                 
    38                                 
    39 0000001B 57                      push rdi
    40                                 
    41                                 
    42 0000001C E8E6FFFFFF              call strlen
    43                                 
    44                                 
    45 00000021 4889C2                  mov rdx, rax
    46 00000024 48C7C001000000          mov rax, 1
    47 0000002B 48C7C701000000          mov rdi, 1
    48 00000032 5E                      pop rsi
    49 00000033 0F05                    syscall
    50                                 
    51 00000035 C3                      ret
    52                                 
    53                                 
    54                                 
    55                                 [global print_char]
    56                                 print_char:
    57                                 
    58 00000036 57                      push rdi
    59                                 
    60                                 
    61                                 
    62 00000037 4889E7                  mov rdi, rsp
    63 0000003A E8D7FFFFFF              call print_string
    64                                 
    65                                 
    66 0000003F 4883C408                add rsp, 8
    67                                 
    68 00000043 C3                      ret
    69                                 
    70                                 [global print_newline]
    71                                 print_newline:
    72 00000044 48C7C70A000000          mov rdi, 0xA
    73 0000004B E8E1FFFFFF              call print_char
    74 00000050 C3                      ret
    75                                 
    76                                 
    77                                 [global print_uint]
    78                                 print_uint:
    79                                 
    80                                 
    81                                 
    82 00000051 4889F8                  mov rax, rdi
    83                                 
    84                                 
    85                                 
    86 00000054 4889E7                  mov rdi, rsp
    87                                 
    88                                 
    89                                 
    90                                 
    91                                 
    92 00000057 6A00                    push 0
    93 00000059 6A00                    push 0
    94 0000005B 6A00                    push 0
    95                                 
    96                                 
    97 0000005D 48FFCF                  dec rdi
    98                                 
    99                                 
   100 00000060 49C7C00A000000          mov r8, 10
   101                                 
   102                                 .loop:
   103                                 
   104 00000067 48FFCF                  dec rdi
   105                                 
   106                                 
   107 0000006A 4831D2                  xor rdx, rdx
   108                                 
   109                                 
   110 0000006D 49F7F0                  div r8
   111                                 
   112                                 
   113                                 
   114 00000070 80C230                  add dl, 0x30
   115 00000073 8817                    mov [rdi], dl
   116                                 
   117                                 
   118 00000075 4885C0                  test rax, rax
   119 00000078 75EB                    jnz .loop
   120                                 
   121                                 .end:
   122                                 
   123 0000007A E897FFFFFF              call print_string
   124                                 
   125                                 
   126 0000007F 4883C418                add rsp, 24
   127                                 
   128 00000083 C3                      ret
   129                                 
   130                                 
   131                                 [global print_int]
   132                                 print_int:
   133                                 
   134 00000084 4885FF                  test rdi, rdi
   135 00000087 79C6                    jns print_uint
   136                                 
   137                                 
   138 00000089 4889FB                  mov rbx, rdi
   139 0000008C 48C7C72D000000          mov rdi, '-'
   140 00000093 E899FFFFFF              call print_char
   141                                 
   142                                 
   143 00000098 4889DF                  mov rdi, rbx
   144 0000009B 48F7DF                  neg rdi
   145 0000009E EBAF                    jmp print_uint
   146                                 
   147                                 
   148                                 [global read_char]
   149                                 read_char:
   150                                 
   151                                 
   152 000000A0 6A00                    push 0
   153                                 
   154                                 
   155 000000A2 48C7C000000000          mov rax, 0
   156 000000A9 48C7C700000000          mov rdi, 0
   157 000000B0 4889E6                  mov rsi, rsp
   158 000000B3 48C7C201000000          mov rdx, 1
   159 000000BA 0F05                    syscall
   160                                 
   161                                 
   162 000000BC 58                      pop rax
   163                                 
   164 000000BD C3                      ret
   165                                 
   166                                 
   167                                 
   168                                 
   169                                 [global read_word]
   170                                 read_word:
   171                                 
   172                                 
   173 000000BE 4154                    push r12
   174 000000C0 4155                    push r13
   175 000000C2 4156                    push r14
   176 000000C4 4157                    push r15
   177                                 
   178                                 
   179 000000C6 4885F6                  test rsi, rsi
   180 000000C9 7449                    jz .end_return_zero
   181                                 
   182                                 
   183 000000CB 4989FC                  mov r12, rdi
   184 000000CE 4989F5                  mov r13, rsi
   185 000000D1 4D31F6                  xor r14, r14
   186                                 
   187                                 .while_whitespace:
   188                                 
   189 000000D4 E8C2FFFFFF              call read_char
   190 000000D9 4989C7                  mov r15, rax
   191                                 
   192                                 
   193 000000DC 4885C0                  test rax, rax
   194 000000DF 7433                    jz .end_return_zero
   195                                 
   196                                 
   197 000000E1 4889C7                  mov rdi, rax
   198 000000E4 E83E000000              call is_whitespace
   199 000000E9 4885C0                  test rax, rax
   200 000000EC 75E4                    jnz .while_whitespace
   201                                 
   202                                 
   203                                 
   204                                 .read_into_buffer:
   205                                 
   206 000000EE 47883C34                mov [r12 + r14], r15b
   207                                 
   208                                 
   209 000000F2 49FFC6                  inc r14
   210                                 
   211 000000F5 E8A1FFFFFF              call read_char
   212 000000FA 4989C7                  mov r15, rax
   213                                 
   214                                 
   215 000000FD 4D85FF                  test r15, r15
   216 00000100 7417                    jz .end_success
   217                                 
   218                                 
   219 00000102 4C89FF                  mov rdi, r15
   220 00000105 E81D000000              call is_whitespace
   221 0000010A 4885C0                  test rax, rax
   222 0000010D 750A                    jnz .end_success
   223                                 
   224                                 
   225 0000010F 4D39EE                  cmp r14, r13
   226 00000112 7400                    je .end_return_zero
   227                                 
   228                                 
   229 00000114 EBD6                    jmp .read_into_buffer
   230                                 
   231                                 .end_return_zero:
   232                                 
   233 00000116 4831C0                  xor rax, rax
   234 00000119 EB03                    jmp .end
   235                                 
   236                                 .end_success:
   237                                 
   238 0000011B 43C6043400              mov byte [r12 + r14], 0
   239                                 
   240                                 .end:
   241                                 
   242 00000120 4C89F0                  mov rax, r14
   243                                 
   244                                 
   245 00000123 415C                    pop r12
   246 00000125 415D                    pop r13
   247 00000127 415E                    pop r14
   248 00000129 415F                    pop r15
   249                                 
   250                                 
   251 0000012B C3                      ret
   252                                 
   253                                 
   254                                 
   255                                 is_whitespace:
   256                                 
   257 0000012C 4080FF20                cmp dil, 0x20
   258 00000130 7414                    je .end_found
   259                                 
   260                                 
   261 00000132 4080FF09                cmp dil, 0x9
   262 00000136 740E                    je .end_found
   263                                 
   264                                 
   265 00000138 4080FF0A                cmp dil, 0xA
   266 0000013C 7408                    je .end_found
   267                                 
   268                                 
   269 0000013E 4080FF0D                cmp dil, 0xD
   270 00000142 7402                    je .end_found
   271                                 
   272                                 
   273 00000144 4831C0                  xor rax, rax
   274 00000147 C3                      ret
   275                                 
   276                                 .end_found:
   277 00000148 48C7C001000000          mov rax, 1
   278 0000014F C3                      ret
   279                                 
   280                                 
   281                                 
   282                                 
   283                                 
   284                                 [global parse_uint]
   285                                 parse_uint:
   286 00000150 4831C0                  xor rax, rax
   287 00000153 4831C9                  xor rcx, rcx
   288 00000156 49C7C00A000000          mov r8, 10
   289                                 .loop:
   290                                 
   291 0000015D 448A0C0F                mov r9b, byte [rdi + rcx]
   292 00000161 4180E930                sub r9b, 0x30
   293                                 
   294                                 
   295 00000165 4180F909                cmp r9b, 9
   296 00000169 7710                    ja .end
   297                                 
   298                                 
   299 0000016B 4831D2                  xor rdx, rdx
   300 0000016E 49F7E0                  mul r8
   301 00000171 4983E10F                and r9, 0x0f
   302 00000175 4C01C8                  add rax, r9
   303                                 
   304                                 
   305 00000178 48FFC1                  inc rcx
   306 0000017B EBDE                    jmp .loop
   307                                 
   308                                 .end
   309 0000017D 4889CA                  mov rdx, rcx
   310 00000180 C3                      ret
