// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    // C instruction is: 111 a cccccc ddd jjj
    // jjj destinations are <, =, > than 0 (c[2], c[1], c[0])
    // ddd destinations are A, D, M (c[5], c[4], c[3])
    // cccccc goes straight into ALU (zx=c[11], nx=c[10], ...)
    // a (c[12]), 0 means use A reg, 1 means use M (inM)
    // c[15] == 0 means A instruction, otherwise C instruction

    PARTS:
    // c[15] == 0 means A instruction
    Not(in=instruction[15], out=Ainst);

    // The Mux that feeds into the A register is either ALU output (C
    // instruction) or an A instruction
    Mux16(a=aluout, b[0..14]=instruction[0..14], sel=Ainst, out=instmuxout);

    // Load to A if we have an A instruction, or we if have a C
    // instruction and we need to write to C
    Or(a=Ainst, b=instruction[5], out=loadA);
    ARegister(in=instmuxout, load=loadA, out=aregout, out[0..14]=addressM);

    // Output of A register or inM, feeds into ALU
    And(a=instruction[15], b=instruction[12], out=chooseM);
    Mux16(a=aregout, b=inM, sel=chooseM, out=amuxout);

    // Load to D if we have a C instruction and we want to write to D in it
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=aluout, load=writeD, out=dregout);

    // ALU is straightforward, load the C instruction
    ALU(x=dregout, y=amuxout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);

    // Compute if we should load the PC
    // zr == 1 means aluout == 0, nzr means aluout != 0
    Not(in=zr, out=nzr);
    // ng == 1 means aluout < 1, gez means aluout >= 0, pos means aluout > 0
    Not(in=ng, out=gez);
    And(a=gez, b=nzr, out=pos);

    // instruction[0] means jump if gt zero
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=jgt, out=loadpcgt);
    // instruction[1] means jump if zero
    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=zr, b=jeq, out=loadpceq);
    // instruction[2] means jump if lt zero
    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=ng, b=jlt, out=loadpclt);
    // Combine all conditions and load
    Or8Way(in[0]=loadpcgt, in[1]=loadpceq, in[2]=loadpclt, out=loadpc);
    PC(in=aregout, load=loadpc, inc=true, reset=reset, out[0..14]=pc);

    // writeM if we have a C instruction and M is a dest
    And(a=instruction[3], b=instruction[15], out=writeM);
}